{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B1-fISjlQoXo",
        "outputId": "f4c11fe6-efea-4098-9690-28bd5f79a525"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.8/dist-packages (3.7)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.8/dist-packages (from nltk) (1.2.0)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.8/dist-packages (from nltk) (2022.6.2)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.8/dist-packages (from nltk) (7.1.2)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.8/dist-packages (from nltk) (4.64.1)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: textblob in /usr/local/lib/python3.8/dist-packages (0.15.3)\n",
            "Collecting textblob\n",
            "  Downloading textblob-0.17.1-py2.py3-none-any.whl (636 kB)\n",
            "\u001b[K     |████████████████████████████████| 636 kB 13.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.8/dist-packages (from textblob) (3.7)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (7.1.2)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (4.64.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (1.2.0)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (2022.6.2)\n",
            "Installing collected packages: textblob\n",
            "  Attempting uninstall: textblob\n",
            "    Found existing installation: textblob 0.15.3\n",
            "    Uninstalling textblob-0.15.3:\n",
            "      Successfully uninstalled textblob-0.15.3\n",
            "Successfully installed textblob-0.17.1\n",
            "[nltk_data] Downloading package brown to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/brown.zip.\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n",
            "[nltk_data] Downloading package conll2000 to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/conll2000.zip.\n",
            "[nltk_data] Downloading package movie_reviews to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/movie_reviews.zip.\n",
            "Finished.\n"
          ]
        }
      ],
      "source": [
        "!pip install -U nltk\n",
        "!pip install -U textblob\n",
        "!python -m textblob.download_corpora\n",
        "import random\n",
        "import string"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "from textblob import TextBlob\n",
        "data = '''\n",
        "It's not great if its 1 st letter in variable name is digits.\n",
        "Its good to have 2 nd letter as capital.\n",
        "Variable can contain digits for good.\n",
        "It would be better if it has atleast 1 capital letter.\n",
        "Variable should contain maximum 8 alphabet for good variable name.\n",
        "Variable should contain exactly 2 digits to pass.\n",
        "variable should contain underscore to great.\n",
        "Variable can contain alphabet for good.\n",
        "variable should not contain special characters for worst.\n",
        "\n",
        "'''"
      ],
      "metadata": {
        "id": "Vmy9lUhwQtal"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = TextBlob(data)\n",
        "lines = {}\n",
        "for sentence in data.sentences:\n",
        "    keyword = {}\n",
        "    lines[sentence.string] = keyword;\n",
        "    for i in sentence.tags:\n",
        "        key = i[1].encode('utf-8')\n",
        "        if key not in keyword:\n",
        "            keyword[key] = []\n",
        "        keyword[key].append(i[0].encode('utf-8'))\n",
        "    print(keyword)\n"
      ],
      "metadata": {
        "id": "4yN73Xk7QvRT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1aebb423-986d-4f62-fcfd-1301aac4f374"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{b'PRP': [b'It'], b'VBZ': [b\"'s\", b'is'], b'RB': [b'not'], b'JJ': [b'great', b'st', b'variable'], b'IN': [b'if', b'in'], b'PRP$': [b'its'], b'CD': [b'1'], b'NN': [b'letter', b'name'], b'NNS': [b'digits']}\n",
            "{b'PRP$': [b'Its'], b'JJ': [b'good', b'nd'], b'TO': [b'to'], b'VB': [b'have'], b'CD': [b'2'], b'NN': [b'letter', b'capital'], b'IN': [b'as']}\n",
            "{b'JJ': [b'Variable', b'good'], b'MD': [b'can'], b'VB': [b'contain'], b'NNS': [b'digits'], b'IN': [b'for']}\n",
            "{b'PRP': [b'It', b'it'], b'MD': [b'would'], b'VB': [b'be'], b'JJR': [b'better'], b'IN': [b'if'], b'VBZ': [b'has'], b'VBN': [b'atleast'], b'CD': [b'1'], b'NN': [b'capital', b'letter']}\n",
            "{b'JJ': [b'Variable', b'maximum', b'good', b'variable'], b'MD': [b'should'], b'VB': [b'contain'], b'CD': [b'8'], b'NN': [b'alphabet', b'name'], b'IN': [b'for']}\n",
            "{b'JJ': [b'Variable'], b'MD': [b'should'], b'VB': [b'contain', b'pass'], b'RB': [b'exactly'], b'CD': [b'2'], b'NNS': [b'digits'], b'TO': [b'to']}\n",
            "{b'JJ': [b'variable', b'great'], b'MD': [b'should'], b'VB': [b'contain'], b'RB': [b'underscore'], b'TO': [b'to']}\n",
            "{b'JJ': [b'Variable', b'good'], b'MD': [b'can'], b'VB': [b'contain'], b'NN': [b'alphabet'], b'IN': [b'for']}\n",
            "{b'NN': [b'variable'], b'MD': [b'should'], b'RB': [b'not'], b'VB': [b'contain'], b'JJ': [b'special'], b'NNS': [b'characters'], b'IN': [b'for'], b'JJS': [b'worst']}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def decode(l):\n",
        "    if isinstance(l, list):\n",
        "        return [decode(x) for x in l]\n",
        "    else:\n",
        "        return l.decode('utf-8')\n",
        "def questions(word, sentence):\n",
        "    change= re.compile(re.escape(word), re.IGNORECASE)\n",
        "    return change.sub('________', sentence)\n",
        "position = {}\n",
        "minm={}\n",
        "maxm={}\n",
        "exact={}\n",
        "special={}\n",
        "dic={}\n",
        "count=['atleast','maximum','minimum','exactly']\n",
        "ch=['alphabet','capital','digits','special character','alphanumeric']\n",
        "sp=[\"!\", \"”\", \"#\", \"$\", \"%\", \"&\", \"’\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \"`\", \"{\", \"|\", \"}\", \"~\"]\n",
        "spname=[\"Exclamation\", \"Double quote\", \"hash\", \"Dollar\", \"Percent\", \"Ampersand\", \"Single quote\", \"Left parenthesis\", \"Right parenthesis\", \"Asterisk\", \"Plus\", \"Comma\", \"Minus\", \"Full stop\", \"Slash\", \"Colon\", \"Semicolon\", \"Less than\", \"Equal sign\", \"Greater than\", \"Question mark\", \"At sign\", \"Left bracket\", \"Right bracket\", \"Caret\", \"underscore\", \"backtick\", \"Left brace\", \"Vertical bar\", \"Right brace\", \"Tilde\"]\n",
        "def frame(sentence,poss):\n",
        "    analyse = TextBlob(sentence)\n",
        "    val=analyse.sentiment[0]\n",
        "    # if(val>0):\n",
        "    #   print(sentence+': positive')\n",
        "    # else:\n",
        "    #   print(sentence+': negative')\n",
        "    for i in range(len(spname)):\n",
        "      if(sentence.find(spname[i])!=-1):\n",
        "        special[spname[i]]=sp[i]\n",
        "        if(val>0):\n",
        "          dic[spname[i]]=True\n",
        "        else:\n",
        "          dic[spname[i]]=False\n",
        "\n",
        "\n",
        "    if b'CD' in poss:\n",
        "        words = decode(poss[b'CD'])\n",
        "        c=0\n",
        "        for i in count:\n",
        "           if(sentence.find(i)!=-1):\n",
        "              c=1\n",
        "              for j in ch:\n",
        "                if(sentence.find(j)!=-1):\n",
        "                  if(i=='exactly'):\n",
        "                    exact[words[0]]=j\n",
        "                  elif(i=='minimum'or i=='atleast'):\n",
        "                    minm[words[0]]=j\n",
        "                  else:\n",
        "                    maxm[words[0]]=j\n",
        "        if(c!=1):\n",
        "          for i in ch:\n",
        "              if(sentence.find(i)!=-1):\n",
        "                c=1\n",
        "                if(val>0):\n",
        "                  position[words[0]]=str(i)+\" True\"\n",
        "                else:\n",
        "                  position[words[0]]=str(i)+\" False\"\n",
        "\n",
        "    else:\n",
        "       for i in ch:\n",
        "         if(sentence.find(i)!=-1):\n",
        "           if(val>0):\n",
        "             dic[i]=True\n",
        "           else:\n",
        "             dic[i]=False\n"
      ],
      "metadata": {
        "id": "BPRNQHC-QxwT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Iterate over the sentenses\n",
        "for sentence in lines.keys():\n",
        "    keyword = lines[sentence]\n",
        "    frame(sentence,keyword)\n",
        "print(\"position vector: \")\n",
        "print(position)\n",
        "print(\"exact vector: \")\n",
        "print(exact)\n",
        "print(\"minimum vector: \")\n",
        "print(minm)\n",
        "print(\"maximum vector: \")\n",
        "print(maxm)\n",
        "print(\"special vector: \")\n",
        "print(special)\n",
        "print(\"Global Dictionary: \")\n",
        "print(dic)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BLqPOSs3Qzdz",
        "outputId": "86d1f7d2-3324-43ba-f5d0-b39b01c7ecb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "position vector: \n",
            "{'1': 'digits False', '2': 'capital True'}\n",
            "exact vector: \n",
            "{'2': 'digits'}\n",
            "minimum vector: \n",
            "{'1': 'capital'}\n",
            "maximum vector: \n",
            "{'8': 'alphabet'}\n",
            "special vector: \n",
            "{'underscore': '_'}\n",
            "Global Dictionary: \n",
            "{'digits': True, 'underscore': True, 'alphabet': True, 'special character': False}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def anspcheck(variable):\n",
        "  return variable.isalnum()\n",
        "def ccheck(variable):\n",
        "  return  any(c.isupper() for c in variable)\n",
        "def acheck(variable):\n",
        "  return any(c.isalpha() for c in variable)\n",
        "def dcheck(variable):\n",
        "  return any(c.isdigit() for c in variable)\n",
        "def spcheck(variable):\n",
        "  for i in sp:\n",
        "    if(i in variable):\n",
        "      return True\n",
        "  return False\n",
        "\n",
        "\n",
        "def specialcheck(variable):\n",
        "  a=True\n",
        "  for i in range(len(sp)):\n",
        "    if (sp[i] in variable):\n",
        "      if(spname[i] in dic):\n",
        "        if(dic[spname[i]]==False):\n",
        "          a=not(sp[i] in variable)\n",
        "          if(a==False):\n",
        "            return a\n",
        "      else:\n",
        "        return False\n",
        "  return a\n",
        "\n",
        "\n",
        "def simplify(variable):\n",
        "  count=0\n",
        "  for i in ch:\n",
        "    if i not in dic:\n",
        "      dic[i]=True\n",
        "      count=count+1\n",
        "    else:\n",
        "      if(dic[i]==True):\n",
        "        count=count+1\n",
        "  if(count==5):\n",
        "    return True\n",
        "  else:\n",
        "    if(dic[\"alphanumeric\"]==True and dic[\"special character\"]==False):\n",
        "      ans=anspcheck(variable)\n",
        "      ans=specialcheck(variable)\n",
        "      if(ans==True):\n",
        "        if(dic[\"capital\"]==True):\n",
        "          return ccheck(variable)\n",
        "        else:\n",
        "          return not(ccheck(variable))\n",
        "      else:\n",
        "        return ans\n",
        "    elif(dic[\"alphanumeric\"]==True):\n",
        "      if(dic[\"capital\"]==True):\n",
        "        return ccheck(variable)\n",
        "      else:\n",
        "        return not(ccheck(variable))\n",
        "    elif(dic[\"alphanumeric\"]==False and dic[\"special character\"]==False):\n",
        "      ans=True\n",
        "      if(dic[\"alphabet\"]==True):\n",
        "        ans=acheck(variable)\n",
        "        if(ans==False):\n",
        "          return False\n",
        "      else:\n",
        "        ans=not(acheck(variable))\n",
        "        if(ans==False):\n",
        "          return False\n",
        "      if(dic[\"digits\"]==True):\n",
        "        ans=dcheck(variable)\n",
        "        if(ans==False):\n",
        "          return False\n",
        "      else:\n",
        "        ans=not(dcheck(variable))\n",
        "        if(ans==False):\n",
        "          return False\n",
        "      if(dic[\"capital\"]==True):\n",
        "        ans=ccheck(variable)\n",
        "        if(ans==False):\n",
        "          return False\n",
        "      else:\n",
        "        ans=not(ccheck(variable))\n",
        "        if(ans==False):\n",
        "          return False\n",
        "      return ans\n",
        "\n",
        "def poscheck(variable):\n",
        "  if(bool(position)==False):\n",
        "    return True\n",
        "  ans=True\n",
        "  for p,val in position.items():\n",
        "    if(\"digits\" in val):\n",
        "      v=val[-5:]\n",
        "\n",
        "      if(v==\" True\"):\n",
        "        ans=dcheck(variable[int(p)-1])\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "      else:\n",
        "        ans=not(dcheck(variable[int(p)-1]))\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "    if(\"alphabet\" in val):\n",
        "      v=val[-5:]\n",
        "\n",
        "      if(v==\" True\"):\n",
        "        ans=acheck(variable[int(p)-1])\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "      else:\n",
        "        ans=not(acheck(variable[int(p)-1]))\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "    if(\"capital\" in val):\n",
        "      v=val[-5:]\n",
        "\n",
        "      if(v==\" True\"):\n",
        "        ans=ccheck(variable[int(p)-1])\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "      else:\n",
        "        ans=not(ccheck(variable[int(p)-1]))\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "    if(\"special character\" in val):\n",
        "      v=val[-5:]\n",
        "\n",
        "      if(v==\" True\"):\n",
        "        ans=spcheck(variable[int(p)-1])\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "      else:\n",
        "        ans=not(spcheck(variable[int(p)-1]))\n",
        "        if(ans==False):\n",
        "          return ans\n",
        "\n",
        "  return ans\n",
        "\n",
        "def freqcheck(variable):\n",
        "  if(bool(exact)==False and bool(minm)==False and bool(maxm)==False):\n",
        "    return True\n",
        "  ans=True\n",
        "  c1=0\n",
        "  c2=0\n",
        "  c3=0\n",
        "  c4=0\n",
        "  for i in variable:\n",
        "    if i.isdigit():\n",
        "      c1=c1+1\n",
        "    elif i.isalpha():\n",
        "      c2=c2+1\n",
        "      if i.isupper():\n",
        "        c3=c3+1\n",
        "    else:\n",
        "      c4=c4+1\n",
        "  for p,val in exact.items():\n",
        "    if(val==\"digits\"):\n",
        "      if(c1!=int(p)):\n",
        "        return False\n",
        "    if(val==\"alphabet\"):\n",
        "\n",
        "      if(c2!=int(p)):\n",
        "        return False\n",
        "    if(val==\"capital\"):\n",
        "      if(c3!=int(p)):\n",
        "        return False\n",
        "    if(val==\"special character\"):\n",
        "      if(c4!=int(p)):\n",
        "        return False\n",
        "  for p,val in minm.items():\n",
        "\n",
        "    if(val==\"digits\"):\n",
        "      if(c1<int(p)):\n",
        "        return False\n",
        "    if(val==\"alphabet\"):\n",
        "      if(c2<int(p)):\n",
        "        return False\n",
        "    if(val==\"capital\"):\n",
        "      if(c3<int(p)):\n",
        "\n",
        "        return False\n",
        "    if(val==\"special character\"):\n",
        "      if(c4<int(p)):\n",
        "        return False\n",
        "  for p,val in maxm.items():\n",
        "    if(val==\"digits\"):\n",
        "      if(c1>int(p)):\n",
        "        return False\n",
        "    if(val==\"alphabet\"):\n",
        "      if(c2>int(p)):\n",
        "        return False\n",
        "    if(val==\"capital\"):\n",
        "      if(c3>int(p)):\n",
        "        return False\n",
        "    if(val==\"special character\"):\n",
        "      if(c4>int(p)):\n",
        "        return False\n",
        "  return ans\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def checker(variable):\n",
        "  ans=simplify(variable)\n",
        "  if(ans==True):\n",
        "    if(dic[\"special character\"]==False):\n",
        "      ans=specialcheck(variable)\n",
        "    if(ans==True):\n",
        "      ans=poscheck(variable)\n",
        "      if(ans==True):\n",
        "        ans=freqcheck(variable)\n",
        "      else:\n",
        "        return ans\n",
        "    else:\n",
        "      return ans\n",
        "  else:\n",
        "    return ans\n",
        "  return ans"
      ],
      "metadata": {
        "id": "Q2r6L6pPpCfd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def false_var_name_gen():\n",
        "    addition = []\n",
        "    addition += random.choices([*string.ascii_uppercase],k=random.randint(1,2))\n",
        "    addition += random.choices([*string.punctuation],k=random.randint(1,2))\n",
        "    addition += random.choices([*string.digits],k=random.randint(2,3))\n",
        "    addition += random.choices([*string.ascii_lowercase],k=(10-len(addition)))\n",
        "    random.shuffle(addition)\n",
        "    return \"\".join(addition)\n",
        "\n",
        "allchoice = []\n",
        "dic[\"capital\"] = True\n",
        "for typech in dic:\n",
        "  if(dic[typech]==True):\n",
        "    allchoice.append(typech)\n",
        "\n",
        "def getcharacter(type):\n",
        "  if(type==\"digits\"):\n",
        "    return random.choice([*string.digits])\n",
        "  elif(type==\"alphabet\"):\n",
        "    return random.choice([*string.ascii_lowercase])\n",
        "  elif(type==\"underscore\"):\n",
        "    return \"_\"\n",
        "  elif(type==\"capital\"):\n",
        "    return random.choice([*string.ascii_uppercase])\n",
        "  elif(type==\"special character\"):\n",
        "    return random.choice([*string.punctuation])\n",
        "\n",
        "\n",
        "\n",
        "def true_var_name_gen():\n",
        "    ans,rest=[None for i in range(10)],[]\n",
        "    if(bool(position)==True):\n",
        "      n_dig, n_low, n_cap, n_sp, n_u =0,0,0,0,0\n",
        "      for p,val in position.items():\n",
        "        if(\"digits\" in val):\n",
        "          v=val[-5:]\n",
        "          if(v==\" True\"):\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=random.choice(string.digits)\n",
        "            n_dig+=1\n",
        "          else:\n",
        "            templist=allchoice.copy()\n",
        "            templist.remove(\"digits\")\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=getcharacter(random.choice(templist))\n",
        "\n",
        "        if(\"alphabet\" in val):\n",
        "          v=val[-5:]\n",
        "          if(v==\" True\"):\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=random.choice(string.ascii_lowercase)\n",
        "            n_low+=1\n",
        "          else:\n",
        "            templist=allchoice.copy()\n",
        "            templist.remove(\"alphabet\")\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=getcharacter(random.choice(templist))\n",
        "        if(\"underscore\" in val):\n",
        "          v=val[-5:]\n",
        "          if(v==\" True\"):\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=\"_\"\n",
        "            n_low+=1\n",
        "          else:\n",
        "            templist=allchoice.copy()\n",
        "            templist.remove(\"underscore\")\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=getcharacter(random.choice(templist))\n",
        "        if(\"capital\" in val):\n",
        "          v=val[-5:]\n",
        "          if(v==\" True\"):\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=random.choice(string.ascii_uppercase)\n",
        "            n_cap+=1\n",
        "          else:\n",
        "            templist=allchoice.copy()\n",
        "            templist.remove(\"capital\")\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=getcharacter(random.choice(templist))\n",
        "\n",
        "        if(\"special character\" in val):\n",
        "          v=val[-5:]\n",
        "          if(v==\" True\"):\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=random.choice(string.punctuation)\n",
        "            n_sp+=1\n",
        "          else:\n",
        "            templist=allchoice.copy()\n",
        "            templist.remove(\"special character\")\n",
        "            ind = int(p)-1\n",
        "            ans[ind]=getcharacter(random.choice(templist))\n",
        "      if(not(bool(exact)==False and bool(minm)==False and bool(maxm)==False)):\n",
        "        for p,val in exact.items():\n",
        "          if(val==\"digits\"):\n",
        "            rest+=[random.choice(string.digits) for i in range(int(p)-n_dig)]\n",
        "            n_dig+=int(p)-n_dig\n",
        "          if(val==\"alphabet\"):\n",
        "            rest+=[random.choice(string.ascii_lowercase) for i in range(int(p)-n_low)]\n",
        "            n_low+=int(p)-n_low\n",
        "          if(val==\"capital\"):\n",
        "            rest+=[random.choice(string.ascii_uppercase) for i in range(int(p)-n_cap)]\n",
        "            n_cap+=int(p)-n_cap\n",
        "          if(val==\"special character\"):\n",
        "            rest+=[random.choice(string.punctuation) for i in range(int(p)-n_sp)]\n",
        "            n_sp+=int(p)-n_sp\n",
        "\n",
        "        for p,val in minm.items():\n",
        "          if(val==\"digits\"):\n",
        "            if(n_dig<int(p)):\n",
        "              rest+=[random.choice(string.digits) for i in range(int(p)-n_dig)]\n",
        "          if(val==\"alphabet\"):\n",
        "            if(n_low<int(p)):\n",
        "              rest+=[random.choice(string.ascii_lowercase) for i in range(int(p)-n_low)]\n",
        "          if(val==\"capital\"):\n",
        "            if(n_cap<int(p)):\n",
        "              rest+=[random.choice(string.ascii_uppercase) for i in range(int(p)-n_cap)]\n",
        "          if(val==\"special character\"):\n",
        "            if(n_sp<int(p)):\n",
        "              rest+=[random.choice(string.punctuation) for i in range(int(p)-n_sp)]\n",
        "    for index, ch in enumerate(ans):\n",
        "      if (ch==None):\n",
        "        newch = rest.pop() if len(rest) > 0 else random.choice(string.ascii_lowercase)\n",
        "        ans[index]= newch\n",
        "    return \"\".join(ans)"
      ],
      "metadata": {
        "id": "7nOUwFiFVSD4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def final_var_gen():\n",
        "    return random.choices([false_var_name_gen(),true_var_name_gen()],weights=[30,90],k=1)[0]\n",
        "\n",
        "arr = [final_var_gen() for i in range (10)]\n",
        "arr = [i for i in filter(lambda a:isinstance(a, str),arr)]"
      ],
      "metadata": {
        "id": "UPemz3xXVWBp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('-------------------------------------------------------------------------------------------')\n",
        "print('Contraints Given By User: \\n')\n",
        "print(data)\n",
        "print('-------------------------------------------------------------------------------------------')\n",
        "print(\"Answer the following questions and check if the shown variable name is valid or not\\n\")\n",
        "print(\"Input True/False \\n\")\n",
        "for i in arr:\n",
        "  abool = None\n",
        "  ans = input((i +\" is valid?: \"))\n",
        "  ans=ans.lower()\n",
        "  if (ans ==\"true\"):\n",
        "    abool = True\n",
        "  elif (ans==\"false\"):\n",
        "    abool=False\n",
        "  else:\n",
        "    print(\"Invalid answer\")\n",
        "    continue\n",
        "  if abool ==checker(i):\n",
        "    print(\"    Yes,You are Correct It's a valid variable name\\n\")\n",
        "  elif abool !=checker(i):\n",
        "    print(\"   Sorry, Incorrect It's not a valid variable name\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1FnAQgJjVbkA",
        "outputId": "cd995277-d8c1-4424-e21c-9d5be0bd7108"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------------------------------------------------------------------------------\n",
            "Contraints Given By User: \n",
            "\n",
            "\n",
            "It's not great if its 1 st letter in variable name is digits.\n",
            "Its good to have 2 nd letter as capital.\n",
            "Variable can contain digits for good.\n",
            "It would be better if it has atleast 1 capital letter.\n",
            "Variable should contain maximum 8 alphabet for good variable name.\n",
            "Variable should contain exactly 2 digits to pass.\n",
            "variable should contain underscore to great.\n",
            "Variable can contain alphabet for good.\n",
            "variable should not contain special characters for worst.\n",
            "\n",
            "\n",
            "-------------------------------------------------------------------------------------------\n",
            "Answer the following questions and check if the shown variable name is valid or not\n",
            "\n",
            "Input True/False \n",
            "\n",
            "SW49cjksoj is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "VF11uatzyv is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "_T89shfxee is valid?: False\n",
            "   Sorry, Incorrect It's not a valid variable name\n",
            "\n",
            "_M65niiqfu is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "_G89oqhygh is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "eV09umirha is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "_H58nwrbem is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "NA64ihsytw is valid?: False\n",
            "   Sorry, Incorrect It's not a valid variable name\n",
            "\n",
            "bL30lgagta is valid?: True\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n",
            "+1quHC0g7l is valid?: True\n",
            "   Sorry, Incorrect It's not a valid variable name\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s=input(\"Enter a valid variable name :\")\n",
        "if(checker(s)==True):\n",
        " print(\"    Yes,You are Correct It's a valid variable name\\n\")\n",
        "else:\n",
        " print(\"   Sorry, Incorrect It's not a valid variable name\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3CwiMDCEuhfr",
        "outputId": "6bf8eadc-1350-466d-b0c3-a315d7281608"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a valid variable name :AVni_17\n",
            "    Yes,You are Correct It's a valid variable name\n",
            "\n"
          ]
        }
      ]
    }
  ]
}
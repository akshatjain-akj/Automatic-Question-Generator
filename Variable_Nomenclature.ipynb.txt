{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tv9sS3VZ2hrI",
        "outputId": "6f19bba7-88fd-4eff-da59-d8d2ef12cb64"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.8/dist-packages (3.7)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.8/dist-packages (from nltk) (1.2.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.8/dist-packages (from nltk) (7.1.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.8/dist-packages (from nltk) (2022.6.2)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.8/dist-packages (from nltk) (4.64.1)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: textblob in /usr/local/lib/python3.8/dist-packages (0.17.1)\n",
            "Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.8/dist-packages (from textblob) (3.7)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (4.64.1)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (2022.6.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (1.2.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.8/dist-packages (from nltk>=3.1->textblob) (7.1.2)\n",
            "[nltk_data] Downloading package brown to /root/nltk_data...\n",
            "[nltk_data]   Package brown is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n",
            "[nltk_data] Downloading package conll2000 to /root/nltk_data...\n",
            "[nltk_data]   Package conll2000 is already up-to-date!\n",
            "[nltk_data] Downloading package movie_reviews to /root/nltk_data...\n",
            "[nltk_data]   Package movie_reviews is already up-to-date!\n",
            "Finished.\n"
          ]
        }
      ],
      "source": [
        "!pip install -U nltk\n",
        "!pip install -U textblob\n",
        "!python -m textblob.download_corpora"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CBP6drET4Et9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03797196-1313-4554-99a8-8cbf9f488083"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[b'NNS', 'Tuples'], [b'VBP', 'are'], [b'VBN', 'used'], [b'TO', 'to'], [b'VB', 'store'], [b'JJ', 'multiple'], [b'NNS', 'items'], [b'IN', 'in'], [b'DT', 'a'], [b'JJ', 'single'], [b'NN', 'variable']]\n",
            "[[b'NNS', 'Tuples'], [b'VBP', 'are'], [b'VBN', 'written'], [b'IN', 'with'], [b'JJ', 'round'], [b'NNS', 'brackets']]\n",
            "[[b'JJ', 'Tuple'], [b'NNS', 'items'], [b'VBP', 'are'], [b'VBN', 'ordered'], [b'JJ', 'unchangeable'], [b'CC', 'and'], [b'VB', 'allow'], [b'NN', 'duplicate'], [b'NNS', 'values']]\n",
            "[[b'NNS', 'Sets'], [b'VBP', 'are'], [b'VBN', 'used'], [b'TO', 'to'], [b'VB', 'store'], [b'JJ', 'multiple'], [b'NNS', 'items'], [b'IN', 'in'], [b'DT', 'a'], [b'JJ', 'single'], [b'NN', 'variable']]\n",
            "[[b'NNS', 'Sets'], [b'VBP', 'are'], [b'VBN', 'written'], [b'IN', 'with'], [b'JJ', 'curly'], [b'NNS', 'brackets']]\n",
            "[[b'DT', 'The'], [b'NNS', 'items'], [b'IN', 'in'], [b'NNS', 'Sets'], [b'VBP', 'are'], [b'JJ', 'unordered'], [b'JJ', 'unchangeable'], [b'CC', 'and'], [b'VBP', 'do'], [b'RB', 'not'], [b'VB', 'allow'], [b'NN', 'duplicate'], [b'NNS', 'values']]\n",
            "[[b'NNS', 'Sets'], [b'MD', 'can'], [b'RB', 'not'], [b'VB', 'have'], [b'CD', 'two'], [b'NNS', 'items'], [b'IN', 'with'], [b'DT', 'the'], [b'JJ', 'same'], [b'NN', 'value'], [b'CC', 'and'], [b'NNS', 'items'], [b'MD', 'can'], [b'VB', 'be'], [b'IN', 'of'], [b'DT', 'any'], [b'NNS', 'data'], [b'NN', 'type']]\n",
            "[[b'NNS', 'Lists'], [b'VBP', 'are'], [b'VBN', 'used'], [b'TO', 'to'], [b'VB', 'store'], [b'JJ', 'multiple'], [b'NNS', 'items'], [b'IN', 'in'], [b'DT', 'a'], [b'JJ', 'single'], [b'NN', 'variable']]\n",
            "[[b'NNS', 'Lists'], [b'VBP', 'need'], [b'RB', 'not'], [b'VB', 'be'], [b'JJ', 'homogeneous'], [b'RB', 'always'], [b'WDT', 'which'], [b'VBZ', 'makes'], [b'PRP', 'it'], [b'DT', 'the'], [b'RBS', 'most'], [b'JJ', 'powerful'], [b'NN', 'tool'], [b'IN', 'in'], [b'NNP', 'Python']]\n",
            "[[b'NNS', 'Lists'], [b'VBP', 'are'], [b'VBN', 'created'], [b'VBG', 'using'], [b'JJ', 'square'], [b'NNS', 'brackets']]\n",
            "[[b'PRP$', 'Its'], [b'NNS', 'items'], [b'VBP', 'are'], [b'VBN', 'ordered'], [b'JJ', 'changeable'], [b'CC', 'and'], [b'VB', 'allow'], [b'NN', 'duplicate'], [b'NNS', 'values']]\n",
            "[[b'NNS', 'Dictionaries'], [b'VBP', 'are'], [b'VBN', 'used'], [b'TO', 'to'], [b'VB', 'store'], [b'NNS', 'data'], [b'NNS', 'values'], [b'IN', 'in'], [b'JJ', 'key'], [b'CC', 'and'], [b'NN', 'value'], [b'NNS', 'pairs']]\n",
            "[[b'JJ', 'Dictionary'], [b'NNS', 'items'], [b'VBP', 'are'], [b'VBN', 'ordered'], [b'JJ', 'changeable'], [b'CC', 'and'], [b'VBZ', 'does'], [b'RB', 'not'], [b'VB', 'allow'], [b'NNS', 'duplicates']]\n",
            "[[b'NNS', 'Dictionaries'], [b'MD', 'can'], [b'RB', 'not'], [b'VB', 'have'], [b'CD', 'two'], [b'NNS', 'items'], [b'IN', 'with'], [b'DT', 'the'], [b'JJ', 'same'], [b'NN', 'key'], [b'CC', 'and'], [b'NNS', 'values'], [b'IN', 'of'], [b'NNS', 'items'], [b'MD', 'can'], [b'VB', 'be'], [b'IN', 'of'], [b'DT', 'any'], [b'NNS', 'data'], [b'NN', 'type']]\n",
            "[[b'NN', 'Inheritance'], [b'VBZ', 'allows'], [b'PRP', 'us'], [b'TO', 'to'], [b'VB', 'define'], [b'DT', 'a'], [b'NN', 'class'], [b'IN', 'that'], [b'VBZ', 'inherits'], [b'PDT', 'all'], [b'DT', 'the'], [b'NNS', 'methods'], [b'CC', 'and'], [b'NNS', 'properties'], [b'IN', 'from'], [b'DT', 'another'], [b'NN', 'class']]\n",
            "[[b'NN', 'Parent'], [b'NN', 'class'], [b'VBZ', 'is'], [b'DT', 'the'], [b'NN', 'class'], [b'VBG', 'being'], [b'VBN', 'inherited'], [b'IN', 'from'], [b'RB', 'also'], [b'VBD', 'called'], [b'NN', 'base'], [b'NN', 'class']]\n",
            "[[b'NNP', 'Child'], [b'NN', 'class'], [b'VBZ', 'is'], [b'DT', 'the'], [b'NN', 'class'], [b'WDT', 'that'], [b'VBZ', 'inherits'], [b'IN', 'from'], [b'DT', 'another'], [b'NN', 'class'], [b'RB', 'also'], [b'VBD', 'called'], [b'JJ', 'derived'], [b'NN', 'class']]\n",
            "[[b'TO', 'To'], [b'VB', 'create'], [b'DT', 'a'], [b'JJ', 'child'], [b'NN', 'class'], [b'WDT', 'that'], [b'VBZ', 'inherits'], [b'DT', 'the'], [b'NN', 'functionality'], [b'IN', 'from'], [b'PRP$', 'its'], [b'NN', 'parent'], [b'NN', 'class'], [b'VBP', 'send'], [b'DT', 'the'], [b'NN', 'parent'], [b'NN', 'class'], [b'IN', 'as'], [b'DT', 'a'], [b'NN', 'parameter'], [b'WRB', 'when'], [b'VBG', 'creating'], [b'DT', 'the'], [b'NN', 'child'], [b'NN', 'class']]\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "from textblob import TextBlob\n",
        "data = '''Tuples are used to store multiple items in a single variable. Tuples are written with round brackets.\n",
        "Tuple items are ordered, unchangeable, and allow duplicate values.\n",
        "Sets are used to store multiple items in a single variable. Sets are written with curly brackets.\n",
        "The items in Sets are unordered, unchangeable, and do not allow duplicate values.\n",
        "Sets cannot have two items with the same value and items can be of any data type.\n",
        "Lists are used to store multiple items in a single variable.\n",
        "Lists need not be homogeneous always which makes it the most powerful tool in Python.\n",
        "Lists are created using square brackets. Its items are ordered, changeable, and allow duplicate values.\n",
        "Dictionaries are used to store data values in key and value pairs.\n",
        "Dictionary items are ordered, changeable, and does not allow duplicates.\n",
        "Dictionaries cannot have two items with the same key and values of items can be of any data type.\n",
        "Inheritance allows us to define a class that inherits all the methods and properties from another class.\n",
        "Parent class is the class being inherited from, also called base class.\n",
        "Child class is the class that inherits from another class, also called derived class.\n",
        "To create a child class that inherits the functionality from its parent class, send the parent class as a parameter when creating the child class.\n",
        "'''\n",
        "data = TextBlob(data)\n",
        "lines = {}\n",
        "for sentence in data.sentences:\n",
        "  keyword = []\n",
        "  lines[sentence.string] = keyword;\n",
        "  for i in sentence.tags:\n",
        "      key = i[1].encode('utf-8')\n",
        "      keyword.append([key,i[0]])\n",
        "  print(keyword)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p4TxZsLk4NzO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e24ad9f-96ab-4d20-8d29-1ce63992f241"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            " The give data from which the following Fill in the Blank questions are generated is as follows:- \n",
            "\n",
            "--------------------------------------------------------------------------------------------------------------------------------------------\n",
            "\n",
            "Tuples are used to store multiple items in a single variable. Tuples are written with round brackets.\n",
            "Tuple items are ordered, unchangeable, and allow duplicate values.\n",
            "Sets are used to store multiple items in a single variable. Sets are written with curly brackets. \n",
            "The items in Sets are unordered, unchangeable, and do not allow duplicate values.\n",
            "Sets cannot have two items with the same value and items can be of any data type.\n",
            "Lists are used to store multiple items in a single variable.\n",
            "Lists need not be homogeneous always which makes it the most powerful tool in Python.\n",
            "Lists are created using square brackets. Its items are ordered, changeable, and allow duplicate values.\n",
            "Dictionaries are used to store data values in key and value pairs.\n",
            "Dictionary items are ordered, changeable, and does not allow duplicates.\n",
            "Dictionaries cannot have two items with the same key and values of items can be of any data type.\n",
            "Inheritance allows us to define a class that inherits all the methods and properties from another class.\n",
            "Parent class is the class being inherited from, also called base class.\n",
            "Child class is the class that inherits from another class, also called derived class.\n",
            "To create a child class that inherits the functionality from its parent class, send the parent class as a parameter when creating the child class.\n",
            "\n",
            "--------------------------------------------------------------------------------------------------------------------------------------------\n",
            "\n",
            " The questions are given below:-\n",
            "\n",
            "1) ________ are used to store multiple items in a single variable.\n",
            "     Answer: Tuples\n",
            "\n",
            "2) Tuples are used to store ________ in a single variable.\n",
            "     Answer: multiple items\n",
            "\n",
            "3) Tuples are used to store multiple items in a ________ variable.\n",
            "     Answer: single\n",
            "\n",
            "\n",
            "4) ________ are written with round brackets.\n",
            "     Answer: Tuples\n",
            "\n",
            "5) Tuples are written with ________ brackets.\n",
            "     Answer: round\n",
            "\n",
            "\n",
            "6) Tuple items are ordered, ________, and allow duplicate values.\n",
            "     Answer: unchangeable\n",
            "\n",
            "7) ________ are ordered, unchangeable, and allow duplicate values.\n",
            "     Answer: Tuple items\n",
            "\n",
            "8) Tuple items are ordered, unchangeable, and allow ________ values.\n",
            "     Answer: duplicate\n",
            "\n",
            "\n",
            "9) Sets are used to store multiple items in a ________ variable.\n",
            "     Answer: single\n",
            "\n",
            "10) Sets are used to store ________ in a single variable.\n",
            "     Answer: multiple items\n",
            "\n",
            "11) ________ are used to store multiple items in a single variable.\n",
            "     Answer: Sets\n",
            "\n",
            "\n",
            "12) ________ are written with curly brackets.\n",
            "     Answer: Sets\n",
            "\n",
            "13) Sets are written with ________ brackets.\n",
            "     Answer: curly\n",
            "\n",
            "\n",
            "14) The ________ in Sets are unordered, unchangeable, and do not allow duplicate values.\n",
            "     Answer: items\n",
            "\n",
            "15) The items in ________ are unordered, unchangeable, and do not allow duplicate values.\n",
            "     Answer: Sets\n",
            "\n",
            "16) The items in Sets are unordered, unchangeable, and do not allow ________ values.\n",
            "     Answer: duplicate\n",
            "\n",
            "17) The items in Sets are unordered, unchangeable, and do not allow duplicate values.\n",
            "     Answer: unordered unchangeable\n",
            "\n",
            "\n",
            "18) Sets cannot have two ________ with the same value and ________ can be of any data type.\n",
            "     Answer: items\n",
            "\n",
            "19) Sets cannot have two items with the ________ and items can be of any data type.\n",
            "     Answer: same value\n",
            "\n",
            "20) ________ cannot have two items with the same value and items can be of any data type.\n",
            "     Answer: Sets\n",
            "\n",
            "21) Sets cannot have two items with the same value and items can be of any ________.\n",
            "     Answer: data type\n",
            "\n",
            "\n",
            "22) Lists are used to store multiple items in a ________ variable.\n",
            "     Answer: single\n",
            "\n",
            "23) Lists are used to store ________ in a single variable.\n",
            "     Answer: multiple items\n",
            "\n",
            "24) ________ are used to store multiple items in a single variable.\n",
            "     Answer: Lists\n",
            "\n",
            "\n",
            "25) Lists need not be ________ always which makes it the most powerful tool in Python.\n",
            "     Answer: homogeneous\n",
            "\n",
            "26) ________ need not be homogeneous always which makes it the most powerful tool in Python.\n",
            "     Answer: Lists\n",
            "\n",
            "27) Lists need not be homogeneous always which makes it the most ________ in Python.\n",
            "     Answer: powerful tool\n",
            "\n",
            "\n",
            "28) Lists are created using ________ brackets.\n",
            "     Answer: square\n",
            "\n",
            "29) ________ are created using square brackets.\n",
            "     Answer: Lists\n",
            "\n",
            "\n",
            "30) Its ________ are ordered, changeable, and allow duplicate values.\n",
            "     Answer: items\n",
            "\n",
            "31) Its items are ordered, ________, and allow duplicate values.\n",
            "     Answer: changeable\n",
            "\n",
            "32) Its items are ordered, changeable, and allow ________ values.\n",
            "     Answer: duplicate\n",
            "\n",
            "\n",
            "33) Dictionaries are used to store data values in ________ and value pairs.\n",
            "     Answer: key\n",
            "\n",
            "34) Dictionaries are used to store data ________s in key and ________ pairs.\n",
            "     Answer: value\n",
            "\n",
            "35) Dictionaries are used to store ________ values in key and value pairs.\n",
            "     Answer: data\n",
            "\n",
            "36) ________ are used to store data values in key and value pairs.\n",
            "     Answer: Dictionaries\n",
            "\n",
            "\n",
            "37) Dictionary items are ordered, ________, and does not allow duplicates.\n",
            "     Answer: changeable\n",
            "\n",
            "38) ________ are ordered, changeable, and does not allow duplicates.\n",
            "     Answer: Dictionary items\n",
            "\n",
            "\n",
            "39) Dictionaries cannot have two ________ with the same key and values of ________ can be of any data type.\n",
            "     Answer: items\n",
            "\n",
            "40) ________ cannot have two items with the same key and values of items can be of any data type.\n",
            "     Answer: Dictionaries\n",
            "\n",
            "41) Dictionaries cannot have two items with the same key and values of items can be of any ________.\n",
            "     Answer: data type\n",
            "\n",
            "42) Dictionaries cannot have two items with the same key and ________ of items can be of any data type.\n",
            "     Answer: values\n",
            "\n",
            "43) Dictionaries cannot have two items with the ________ and values of items can be of any data type.\n",
            "     Answer: same key\n",
            "\n",
            "\n",
            "44) Inheritance allows us to define a class that inherits all the ________ and properties from another class.\n",
            "     Answer: methods\n",
            "\n",
            "45) ________ allows us to define a class that inherits all the methods and properties from another class.\n",
            "     Answer: Inheritance\n",
            "\n",
            "46) Inheritance allows us to define a class that inherits all the methods and ________ from another class.\n",
            "     Answer: properties\n",
            "\n",
            "47) Inheritance allows us to define a ________ that inherits all the methods and properties from another ________.\n",
            "     Answer: class\n",
            "\n",
            "\n",
            "48) Parent class is the class being inherited from, also called ________.\n",
            "     Answer: base class\n",
            "\n",
            "49) ________ is the class being inherited from, also called base class.\n",
            "     Answer: Parent class\n",
            "\n",
            "\n",
            "50) ________ is the class that inherits from another class, also called derived class.\n",
            "     Answer: Child class\n",
            "\n",
            "51) Child class is the class that inherits from another class, also called ________ class.\n",
            "     Answer: derived\n",
            "\n",
            "\n",
            "52) To create a child class that inherits the ________ from its parent class, send the parent class as a parameter when creating the child class.\n",
            "     Answer: functionality\n",
            "\n",
            "53) To create a child class that inherits the functionality from its ________, send the ________ as a parameter when creating the child class.\n",
            "     Answer: parent class\n",
            "\n",
            "54) To create a child class that inherits the functionality from its parent class, send the parent class as a ________ when creating the child class.\n",
            "     Answer: parameter\n",
            "\n",
            "55) To create a ________ that inherits the functionality from its parent class, send the parent class as a parameter when creating the ________.\n",
            "     Answer: child class\n",
            "\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print (\"\\n\\n The give data from which the following Fill in the Blank questions are generated is as follows:- \\n\")\n",
        "print('--------------------------------------------------------------------------------------------------------------------------------------------\\n')\n",
        "print(data)\n",
        "print('--------------------------------------------------------------------------------------------------------------------------------------------')\n",
        "print (\"\\n The questions are given below:-\\n\")\n",
        "\n",
        "def decode(l):\n",
        "    if isinstance(l, list):\n",
        "        return [decode(x) for x in l]\n",
        "    else:\n",
        "        return l.decode('utf-8')\n",
        "def questions(word, sentence):\n",
        "    return re.compile(word).sub('________', sentence)\n",
        "\n",
        "megacount = 0\n",
        "def frame(sentence, keyword):\n",
        "    words = []\n",
        "    i = 0\n",
        "    while i<len(keyword):\n",
        "      if keyword[i][0] == b'NN' or keyword[i][0] == b'NNS' :\n",
        "        newblank = \"\"\n",
        "        if i!=0 and keyword[i-1][0] == b'JJ':\n",
        "          newblank += keyword[i-1][1] + \" \"\n",
        "        newblank += keyword[i][1]\n",
        "        if i>=len(keyword) - 1:\n",
        "          break\n",
        "        while i<len(keyword)-1 and (keyword[i+1][0] == b'NN') :\n",
        "          newblank+= \" \" + (keyword[i+1][1])\n",
        "          i+=1\n",
        "        words.append(newblank)\n",
        "        i+=1\n",
        "      elif keyword[i][0] == b'NNP' :\n",
        "        newblank = \"\"\n",
        "        newblank += keyword[i][1]\n",
        "        if i>=len(keyword) - 1:\n",
        "          break\n",
        "        while i<len(keyword)-1 and (keyword[i+1][0] == b'NNP' or keyword[i+1][0] == b'NN' ):\n",
        "          newblank+= \" \" + (keyword[i+1][1])\n",
        "          i+=2\n",
        "        words.append(newblank)\n",
        "      elif keyword[i][0] == b'JJ':\n",
        "        newblank = \"\"\n",
        "        if i!=0 and ( keyword[i-1][0] == b'JJ' or  keyword[i-1][0] == b'RB'):\n",
        "          newblank += keyword[i-1][1] + \" \"\n",
        "        newblank += keyword[i][1]\n",
        "        words.append(newblank)\n",
        "      i+=1\n",
        "    if words:\n",
        "        words = list(set(words))\n",
        "        words.sort()\n",
        "        i = 0\n",
        "        for r_index, r_word in enumerate(words):\n",
        "          for o_index, o_word in enumerate(words):\n",
        "            if r_index == o_index:\n",
        "              continue\n",
        "            if((r_word in o_word) and (r_word in words)):\n",
        "              words[r_index]= \"\"\n",
        "        words = [i for i in words if i != \"\"]\n",
        "        words.sort()\n",
        "        # q_arr = []\n",
        "        for w in list(set(words)):\n",
        "          # q_arr.append(questions(w, sentence))\n",
        "          question= questions(w, sentence)\n",
        "          print( str(megacount+i+1) + \") \" + question )\n",
        "          print(\"     Answer: \" + w + \"\\n\")\n",
        "          i+=1\n",
        "        # print(*q_arr,sep=\"\\n\")\n",
        "        return i\n",
        "\n",
        "for sentence in lines.keys():\n",
        "  keyword = lines[sentence]\n",
        "  megacount += frame(sentence, keyword)\n",
        "  print()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}